name: Build and Test

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  changes:
    runs-on: ubuntu-latest
    outputs:
      binder: ${{ steps.changes.outputs.binder }}
    steps:
    - uses: actions/checkout@v4
    - uses: dorny/paths-filter@v3
      id: changes
      with:
        filters: |
          binder:
            - 'binder/environment.yml'
            - 'binder/requirements.txt'
            - 'binder/postBuild'
            - 'binder/start'
            - 'binder/runtime.txt'

  build:
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.binder == 'true'
    permissions:
      contents: read
      packages: write
    outputs:
      image-built: ${{ steps.build-check.outputs.built }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install repo2docker
      run: |
        pip install jupyter-repo2docker

    - name: Log in to Container Registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Build Docker image with repo2docker
      id: build-check
      run: |
        repo2docker \
          --user-name jovyan \
          --user-id 1000 \
          --no-run \
          --image-name ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }} \
          .
        echo "built=true" >> $GITHUB_OUTPUT

    - name: Tag additional versions
      if: github.event_name != 'pull_request'
      run: |
        # Tag with branch name
        docker tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }} \
                   ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}
        
        # Tag as latest if main branch
        if [ "${{ github.ref_name }}" = "main" ]; then
          docker tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }} \
                     ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
        fi

    - name: Push Docker image
      if: github.event_name != 'pull_request'
      run: |
        docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
        docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}
        
        if [ "${{ github.ref_name }}" = "main" ]; then
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
        fi

  test:
    runs-on: ubuntu-latest
    needs: [changes, build]
    if: always()
    permissions:
      contents: read
      packages: read

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Determine Docker image to use
      id: image
      run: |
        if [ "${{ needs.build.outputs.image-built }}" = "true" ]; then
          echo "tag=${{ github.sha }}" >> $GITHUB_OUTPUT
        else
          echo "tag=latest" >> $GITHUB_OUTPUT
        fi

    - name: Pull Docker image
      run: |
        docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.image.outputs.tag }}

    - name: Run pytest with notebook validation
      run: |
        docker run --rm \
          -v ${{ github.workspace }}:/home/jovyan/work \
          -w /home/jovyan/work \
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.image.outputs.tag }} \
          pytest --nbval --current-env binder/*.ipynb

    - name: Run papermill preprocessing and test
      run: |
        docker run --rm \
          -v ${{ github.workspace }}:/home/jovyan/work \
          -w /home/jovyan/work \
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.image.outputs.tag }} \
          bash -c "
            papermill --prepare-only -p galaxy NGC5533 binder/07_Bonus_Bulge_Rotation_Curve.ipynb binder/07_Bonus_Bulge_Rotation_Curve_NGC5533.ipynb &&
            papermill --prepare-only -p galaxy NGC7814 binder/07_Bonus_Bulge_Rotation_Curve.ipynb binder/07_Bonus_Bulge_Rotation_Curve_NGC7814.ipynb &&
            pytest --nbval-lax binder/07_Bonus_Bulge_Rotation_Curve_NGC*.ipynb --current-env
          "